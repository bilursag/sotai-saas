// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  name          String?
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  documents     Document[]
  templates     Template[]
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  content     String   @db.Text
  type        String
  status      String   @default("borrador")
  aiGenerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tags        Tag[]
  versions    DocumentVersion[]
  comments    Comment[]
}

model DocumentVersion {
  id          String   @id @default(cuid())
  versionNumber Int
  content     String   @db.Text
  description String?  @db.Text
  createdAt   DateTime @default(now())
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  aiGenerated Boolean  @default(false)
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  content     String   @db.Text
  category    String
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  tags        Tag[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  documents   Document[]
  templates   Template[]
  createdAt   DateTime @default(now())
}

model Comment {
  id          String   @id @default(cuid())
  text        String   @db.Text
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  user        String
}